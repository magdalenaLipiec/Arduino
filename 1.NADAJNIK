#include <SPI.h> 
#include <RF24.h>
#include "printf.h"

RF24 radio(9,10);

const uint64_t pipes[2] = { 0xF0F0F0F0E1LL, 0xF0F0F0F0D2LL };

struct Data_Package {
  
  byte sendX;  //kontrola wysokosci
};
Data_Package data;


void setup(void)
{
  Serial.begin(57600);
  printf_begin();

  radio.begin();

 radio.setPALevel(RF24_PA_LOW);
 radio.setChannel(0x4c);

    radio.openWritingPipe(pipes[0]);
    radio.openReadingPipe(1,pipes[1]);

  radio.enableDynamicPayloads() ;
  radio.setAutoAck( true ) ;
  radio.powerUp() ;
  radio.startListening();

  radio.printDetails();
}

void loop(void)
{

//    // First, stop listening so we can talk.
//    radio.stopListening();
//
//    // Take the time, and send it.  This will block until complete
//    unsigned long time = millis();
//    printf("Now sending %lu...",time);
//    bool ok = radio.write( &time, sizeof(unsigned long) );
//    
//    if (ok)
//      printf("ok...");
//    else
//      printf("failed.\n\r");
//
//    // Now, continue listening
// radio.startListening();
//
//    // Wait here until we get a response, or timeout (250ms)
//    unsigned long started_waiting_at = millis();
//    bool timeout = false;
//    while ( ! radio.available() && ! timeout )
//      if (millis() - started_waiting_at > 1+(radio.getMaxTimeout()/1000) )
//        timeout = true;
//
//    // Describe the results
//    if ( timeout )
//    {
//      printf("Failed, response timed out.\n\r");
//      printf("Timeout duration: %d\n\r", (1+radio.getMaxTimeout()/1000) ) ;
//    }
//    else
//    {
//      // Grab the response, compare, and send to debugging spew
//      unsigned long got_time;
//      radio.read( &got_time, sizeof(unsigned long) );
//
//      // Spew it
//      printf("Got response %lu, round-trip delay: %lu\n\r",got_time,millis()-got_time);
//    }
//
//    // Try again 1s later
//    delay(1000);

  data.sendX = 100;

  radio.stopListening();
  radio.write(&data, sizeof(Data_Package));
  printf(data.sendX);
  delay(1000);
  radio.startListening();
 
}
